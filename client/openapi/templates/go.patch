diff -Naur a/go/api.mustache b/go/api.mustache
--- a/go/api.mustache	2023-12-22 07:08:14.000000000 -0500
+++ b/go/api.mustache	2025-06-30 09:16:31.191652388 -0400
@@ -365,6 +365,12 @@
 		return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHTTPResponse, err
 	}

+	// NCBI Datasets Customization to support zip streaming
+	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
+		return {{#returnType}}localVarReturnValue, {{/returnType}}localVarHTTPResponse, nil
+	}
+	// End NCBI Datasets Customization
+
 	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
 	localVarHTTPResponse.Body.Close()
 	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
diff -Naur a/go/client.mustache b/go/client.mustache
--- a/go/client.mustache	2023-12-22 07:08:14.000000000 -0500
+++ b/go/client.mustache	2025-06-30 15:56:45.055166148 -0400
@@ -262,7 +262,7 @@
 	}

 	if c.cfg.Debug {
-		dump, err := httputil.DumpResponse(resp, true)
+		dump, err := httputil.DumpResponse(resp, false)
 		if err != nil {
 			return resp, err
 		}
diff -Naur a/go/go.mod.mustache b/go/go.mod.mustache
--- a/go/go.mod.mustache	2023-12-22 07:08:14.000000000 -0500
+++ b/go/go.mod.mustache	2025-06-30 14:24:16.846624024 -0400
@@ -1,4 +1,4 @@
-module {{gitHost}}/{{gitUserId}}/{{gitRepoId}}{{#isGoSubmodule}}/{{packageName}}{{/isGoSubmodule}}
+module datasets/openapi/v2

 go 1.18

@@ -9,4 +9,7 @@
 	{{#withAWSV4Signature}}
 	github.com/aws/aws-sdk-go v1.34.14
 	{{/withAWSV4Signature}}
+	{{#importValidator}}
+	gopkg.in/validator.v2 v2.0.1
+	{{/importValidator}}
 )
diff -Naur a/go/model_enum.mustache b/go/model_enum.mustache
--- a/go/model_enum.mustache	2023-12-22 07:08:14.000000000 -0500
+++ b/go/model_enum.mustache	2025-07-01 11:31:36.892029397 -0400
@@ -1,3 +1,5 @@
+import "os"
+
 // {{{classname}}} {{{description}}}{{^description}}the model '{{{classname}}}'{{/description}}
 type {{{classname}}} {{{format}}}{{^format}}{{dataType}}{{/format}}

@@ -35,7 +37,10 @@
 		}
 	}

-	return fmt.Errorf("%+v is not a valid {{classname}}", value)
+	// If no match found, assign the raw value and display a warning
+	*v = {{{classname}}}(value)
+	fmt.Fprintf(os.Stderr, "Warning: '%v' is not a valid value for {{{classname}}}\n", value)
+	return nil
 }

 // New{{{classname}}}FromValue returns a pointer to a valid {{{classname}}}
